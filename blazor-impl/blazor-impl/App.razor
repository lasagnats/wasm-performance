@inject IJSRuntime JSRuntime

<PageTitle>Julia Set Generator</PageTitle>

    <div class="julia-generator">
    <h1 id="julia-title" style="display: none">Julia Set Visualizer</h1>
      <form>
        <label for="height">Height:</label><br />
        <input type="number" id="height" name="height" value="700" /> px<br />
        <label for="width">Width:</label><br />
        <input type="number" id="width" name="width" value="700" /> px<br />
        <label for="imaginary">Imaginary part:</label><br />
        <input type="number" id="imaginary" name="imaginary" value="0.65" />
        i<br />
        <label for="real">Real part:</label><br />
        <input type="number" id="real" name="real" value="-0.15" /><br />
      </form>

      <button id="generate-img">Generate</button>
      <button id="clear">Clear</button>

      <h2>Result:</h2>
      <div id="status-message" style="display: none">
        Image has been generated!
      </div>
      <canvas id="generated-img"></canvas>
    </div>

@code {

    [JSInvokable]
    public static async Task<byte[]> GenerateJuliaSet(int width, int height, float real, float imaginary)
    {
        //return await Task.FromResult(new int[] { width, height, 2, 3 });

        // c = imaginary * i + real
        var scale_x = 3.0f / width;
        var scale_y = 3.0f / height;

        var data = new byte[width * height];

        var c = new Complex(real, imaginary);
        var param_i = 1.5f;
        var param_r = 1.5f;

        for (int y = 0; y < height; y++)
        {
            for (int x = 0; x < width; x++)
            {
                var z = new Complex(x * scale_x - param_r, y * scale_y - param_i);
                var iterIndex = GetIterIndex(z, c);
                data[y * width + x] = (byte)iterIndex;
            }
        }

        return await Task.FromResult(data);

    }

    private static int GetIterIndex(Complex z, Complex c)
    {
        int iterIndex = 0;
        while (iterIndex < 255)
        {
            if (z.Magnitude > 2.0)
                break;
            z = z * z + c;
            iterIndex++;
        }
        return iterIndex;
    }
}